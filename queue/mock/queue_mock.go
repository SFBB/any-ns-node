// Code generated by MockGen. DO NOT EDIT.
// Source: queue/queue.go

// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	context "context"
	reflect "reflect"

	anyns_api_server "github.com/anyproto/any-ns-node/pb/anyns_api_server"
	app "github.com/anyproto/any-sync/app"
	gomock "go.uber.org/mock/gomock"
)

// MockQueueService is a mock of QueueService interface.
type MockQueueService struct {
	ctrl     *gomock.Controller
	recorder *MockQueueServiceMockRecorder
}

// MockQueueServiceMockRecorder is the mock recorder for MockQueueService.
type MockQueueServiceMockRecorder struct {
	mock *MockQueueService
}

// NewMockQueueService creates a new mock instance.
func NewMockQueueService(ctrl *gomock.Controller) *MockQueueService {
	mock := &MockQueueService{ctrl: ctrl}
	mock.recorder = &MockQueueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueService) EXPECT() *MockQueueServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockQueueService) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockQueueServiceMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQueueService)(nil).Close), ctx)
}

// GetRequestStatus mocks base method.
func (m *MockQueueService) GetRequestStatus(ctx context.Context, operationId int64) (anyns_api_server.OperationState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestStatus", ctx, operationId)
	ret0, _ := ret[0].(anyns_api_server.OperationState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestStatus indicates an expected call of GetRequestStatus.
func (mr *MockQueueServiceMockRecorder) GetRequestStatus(ctx, operationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestStatus", reflect.TypeOf((*MockQueueService)(nil).GetRequestStatus), ctx, operationId)
}

// Init mocks base method.
func (m *MockQueueService) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockQueueServiceMockRecorder) Init(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockQueueService)(nil).Init), a)
}

// Name mocks base method.
func (m *MockQueueService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockQueueServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockQueueService)(nil).Name))
}

// NameRegister mocks base method.
func (m *MockQueueService) NameRegister(ctx context.Context, in *anyns_api_server.NameRegisterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameRegister", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// NameRegister indicates an expected call of NameRegister.
func (mr *MockQueueServiceMockRecorder) NameRegister(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameRegister", reflect.TypeOf((*MockQueueService)(nil).NameRegister), ctx, in)
}

// ProcessRequest mocks base method.
func (m *MockQueueService) ProcessRequest(ctx context.Context, req *anyns_api_server.NameRegisterRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRequest", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessRequest indicates an expected call of ProcessRequest.
func (mr *MockQueueServiceMockRecorder) ProcessRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRequest", reflect.TypeOf((*MockQueueService)(nil).ProcessRequest), ctx, req)
}

// Run mocks base method.
func (m *MockQueueService) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockQueueServiceMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockQueueService)(nil).Run), ctx)
}
