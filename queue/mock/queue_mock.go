// Code generated by MockGen. DO NOT EDIT.
// Source: queue/queue.go

// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	context "context"
	reflect "reflect"

	anyns_api_server "github.com/anyproto/any-ns-node/pb/anyns_api_server"
	queue "github.com/anyproto/any-ns-node/queue"
	app "github.com/anyproto/any-sync/app"
	ethclient "github.com/ethereum/go-ethereum/ethclient"
	gomock "go.uber.org/mock/gomock"
)

// MockQueueService is a mock of QueueService interface.
type MockQueueService struct {
	ctrl     *gomock.Controller
	recorder *MockQueueServiceMockRecorder
}

// MockQueueServiceMockRecorder is the mock recorder for MockQueueService.
type MockQueueServiceMockRecorder struct {
	mock *MockQueueService
}

// NewMockQueueService creates a new mock instance.
func NewMockQueueService(ctrl *gomock.Controller) *MockQueueService {
	mock := &MockQueueService{ctrl: ctrl}
	mock.recorder = &MockQueueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueService) EXPECT() *MockQueueServiceMockRecorder {
	return m.recorder
}

// AddNewRequest mocks base method.
func (m *MockQueueService) AddNewRequest(ctx context.Context, req *anyns_api_server.NameRegisterRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewRequest", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewRequest indicates an expected call of AddNewRequest.
func (mr *MockQueueServiceMockRecorder) AddNewRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewRequest", reflect.TypeOf((*MockQueueService)(nil).AddNewRequest), ctx, req)
}

// AddRenewRequest mocks base method.
func (m *MockQueueService) AddRenewRequest(ctx context.Context, req *anyns_api_server.NameRenewRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRenewRequest", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRenewRequest indicates an expected call of AddRenewRequest.
func (mr *MockQueueServiceMockRecorder) AddRenewRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRenewRequest", reflect.TypeOf((*MockQueueService)(nil).AddRenewRequest), ctx, req)
}

// Close mocks base method.
func (m *MockQueueService) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockQueueServiceMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQueueService)(nil).Close), ctx)
}

// FindAndProcessAllItemsInDb mocks base method.
func (m *MockQueueService) FindAndProcessAllItemsInDb(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindAndProcessAllItemsInDb", ctx)
}

// FindAndProcessAllItemsInDb indicates an expected call of FindAndProcessAllItemsInDb.
func (mr *MockQueueServiceMockRecorder) FindAndProcessAllItemsInDb(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAndProcessAllItemsInDb", reflect.TypeOf((*MockQueueService)(nil).FindAndProcessAllItemsInDb), ctx)
}

// FindAndProcessAllItemsInDbWithStatus mocks base method.
func (m *MockQueueService) FindAndProcessAllItemsInDbWithStatus(ctx context.Context, status queue.QueueItemStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindAndProcessAllItemsInDbWithStatus", ctx, status)
}

// FindAndProcessAllItemsInDbWithStatus indicates an expected call of FindAndProcessAllItemsInDbWithStatus.
func (mr *MockQueueServiceMockRecorder) FindAndProcessAllItemsInDbWithStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAndProcessAllItemsInDbWithStatus", reflect.TypeOf((*MockQueueService)(nil).FindAndProcessAllItemsInDbWithStatus), ctx, status)
}

// GetRequestStatus mocks base method.
func (m *MockQueueService) GetRequestStatus(ctx context.Context, operationId int64) (anyns_api_server.OperationState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestStatus", ctx, operationId)
	ret0, _ := ret[0].(anyns_api_server.OperationState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestStatus indicates an expected call of GetRequestStatus.
func (mr *MockQueueServiceMockRecorder) GetRequestStatus(ctx, operationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestStatus", reflect.TypeOf((*MockQueueService)(nil).GetRequestStatus), ctx, operationId)
}

// HandleNonceErrors mocks base method.
func (m *MockQueueService) HandleNonceErrors(err error, prevState, newState queue.QueueItemStatus, ctx context.Context, queueItem *queue.QueueItem, conn *ethclient.Client) (error, queue.QueueItemStatus) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleNonceErrors", err, prevState, newState, ctx, queueItem, conn)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(queue.QueueItemStatus)
	return ret0, ret1
}

// HandleNonceErrors indicates an expected call of HandleNonceErrors.
func (mr *MockQueueServiceMockRecorder) HandleNonceErrors(err, prevState, newState, ctx, queueItem, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNonceErrors", reflect.TypeOf((*MockQueueService)(nil).HandleNonceErrors), err, prevState, newState, ctx, queueItem, conn)
}

// Init mocks base method.
func (m *MockQueueService) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockQueueServiceMockRecorder) Init(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockQueueService)(nil).Init), a)
}

// IsStopProcessing mocks base method.
func (m *MockQueueService) IsStopProcessing(err error, prevState, newState queue.QueueItemStatus) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStopProcessing", err, prevState, newState)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStopProcessing indicates an expected call of IsStopProcessing.
func (mr *MockQueueServiceMockRecorder) IsStopProcessing(err, prevState, newState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStopProcessing", reflect.TypeOf((*MockQueueService)(nil).IsStopProcessing), err, prevState, newState)
}

// Name mocks base method.
func (m *MockQueueService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockQueueServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockQueueService)(nil).Name))
}

// NameRegisterMoveStateNext mocks base method.
func (m *MockQueueService) NameRegisterMoveStateNext(ctx context.Context, queueItem *queue.QueueItem, conn *ethclient.Client) (error, queue.QueueItemStatus) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameRegisterMoveStateNext", ctx, queueItem, conn)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(queue.QueueItemStatus)
	return ret0, ret1
}

// NameRegisterMoveStateNext indicates an expected call of NameRegisterMoveStateNext.
func (mr *MockQueueServiceMockRecorder) NameRegisterMoveStateNext(ctx, queueItem, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameRegisterMoveStateNext", reflect.TypeOf((*MockQueueService)(nil).NameRegisterMoveStateNext), ctx, queueItem, conn)
}

// NameRegister_CommitSent mocks base method.
func (m *MockQueueService) NameRegister_CommitSent(ctx context.Context, queueItem *queue.QueueItem, conn *ethclient.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameRegister_CommitSent", ctx, queueItem, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// NameRegister_CommitSent indicates an expected call of NameRegister_CommitSent.
func (mr *MockQueueServiceMockRecorder) NameRegister_CommitSent(ctx, queueItem, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameRegister_CommitSent", reflect.TypeOf((*MockQueueService)(nil).NameRegister_CommitSent), ctx, queueItem, conn)
}

// NameRegister_InitialState mocks base method.
func (m *MockQueueService) NameRegister_InitialState(ctx context.Context, queueItem *queue.QueueItem, conn *ethclient.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameRegister_InitialState", ctx, queueItem, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// NameRegister_InitialState indicates an expected call of NameRegister_InitialState.
func (mr *MockQueueServiceMockRecorder) NameRegister_InitialState(ctx, queueItem, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameRegister_InitialState", reflect.TypeOf((*MockQueueService)(nil).NameRegister_InitialState), ctx, queueItem, conn)
}

// NameRegister_RegisterWaiting mocks base method.
func (m *MockQueueService) NameRegister_RegisterWaiting(ctx context.Context, queueItem *queue.QueueItem, conn *ethclient.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameRegister_RegisterWaiting", ctx, queueItem, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// NameRegister_RegisterWaiting indicates an expected call of NameRegister_RegisterWaiting.
func (mr *MockQueueServiceMockRecorder) NameRegister_RegisterWaiting(ctx, queueItem, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameRegister_RegisterWaiting", reflect.TypeOf((*MockQueueService)(nil).NameRegister_RegisterWaiting), ctx, queueItem, conn)
}

// NameRenewMoveStateNext mocks base method.
func (m *MockQueueService) NameRenewMoveStateNext(ctx context.Context, queueItem *queue.QueueItem, conn *ethclient.Client) (error, queue.QueueItemStatus) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameRenewMoveStateNext", ctx, queueItem, conn)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(queue.QueueItemStatus)
	return ret0, ret1
}

// NameRenewMoveStateNext indicates an expected call of NameRenewMoveStateNext.
func (mr *MockQueueServiceMockRecorder) NameRenewMoveStateNext(ctx, queueItem, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameRenewMoveStateNext", reflect.TypeOf((*MockQueueService)(nil).NameRenewMoveStateNext), ctx, queueItem, conn)
}

// ProcessItem mocks base method.
func (m *MockQueueService) ProcessItem(ctx context.Context, queueItem *queue.QueueItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessItem", ctx, queueItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessItem indicates an expected call of ProcessItem.
func (mr *MockQueueServiceMockRecorder) ProcessItem(ctx, queueItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessItem", reflect.TypeOf((*MockQueueService)(nil).ProcessItem), ctx, queueItem)
}

// RecoverHighNonce mocks base method.
func (m *MockQueueService) RecoverHighNonce(ctx context.Context, queueItem *queue.QueueItem, conn *ethclient.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverHighNonce", ctx, queueItem, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoverHighNonce indicates an expected call of RecoverHighNonce.
func (mr *MockQueueServiceMockRecorder) RecoverHighNonce(ctx, queueItem, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverHighNonce", reflect.TypeOf((*MockQueueService)(nil).RecoverHighNonce), ctx, queueItem, conn)
}

// RecoverLowNonce mocks base method.
func (m *MockQueueService) RecoverLowNonce(ctx context.Context, queueItem *queue.QueueItem, conn *ethclient.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverLowNonce", ctx, queueItem, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoverLowNonce indicates an expected call of RecoverLowNonce.
func (mr *MockQueueServiceMockRecorder) RecoverLowNonce(ctx, queueItem, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverLowNonce", reflect.TypeOf((*MockQueueService)(nil).RecoverLowNonce), ctx, queueItem, conn)
}

// Run mocks base method.
func (m *MockQueueService) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockQueueServiceMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockQueueService)(nil).Run), ctx)
}

// SaveItemToDb mocks base method.
func (m *MockQueueService) SaveItemToDb(ctx context.Context, queueItem *queue.QueueItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveItemToDb", ctx, queueItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveItemToDb indicates an expected call of SaveItemToDb.
func (mr *MockQueueServiceMockRecorder) SaveItemToDb(ctx, queueItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveItemToDb", reflect.TypeOf((*MockQueueService)(nil).SaveItemToDb), ctx, queueItem)
}
