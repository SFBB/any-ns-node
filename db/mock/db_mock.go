// Code generated by MockGen. DO NOT EDIT.
// Source: db/db.go
//
// Generated by this command:
//
//	mockgen -source=db/db.go
//

// Package mock_mongo is a generated GoMock package.
package mock_mongo

import (
	context "context"
	reflect "reflect"

	mongo "github.com/anyproto/any-ns-node/db"
	app "github.com/anyproto/any-sync/app"
	nameserviceproto "github.com/anyproto/any-sync/nameservice/nameserviceproto"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockDbService is a mock of DbService interface.
type MockDbService struct {
	ctrl     *gomock.Controller
	recorder *MockDbServiceMockRecorder
}

// MockDbServiceMockRecorder is the mock recorder for MockDbService.
type MockDbServiceMockRecorder struct {
	mock *MockDbService
}

// NewMockDbService creates a new mock instance.
func NewMockDbService(ctrl *gomock.Controller) *MockDbService {
	mock := &MockDbService{ctrl: ctrl}
	mock.recorder = &MockDbServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbService) EXPECT() *MockDbServiceMockRecorder {
	return m.recorder
}

// AddUserToTheWhitelist mocks base method.
func (m *MockDbService) AddUserToTheWhitelist(ctx context.Context, owner common.Address, ownerAnyID string, newOperations uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToTheWhitelist", ctx, owner, ownerAnyID, newOperations)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToTheWhitelist indicates an expected call of AddUserToTheWhitelist.
func (mr *MockDbServiceMockRecorder) AddUserToTheWhitelist(ctx, owner, ownerAnyID, newOperations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToTheWhitelist", reflect.TypeOf((*MockDbService)(nil).AddUserToTheWhitelist), ctx, owner, ownerAnyID, newOperations)
}

// DecreaseUserOperationsCount mocks base method.
func (m *MockDbService) DecreaseUserOperationsCount(ctx context.Context, owner common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseUserOperationsCount", ctx, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecreaseUserOperationsCount indicates an expected call of DecreaseUserOperationsCount.
func (mr *MockDbServiceMockRecorder) DecreaseUserOperationsCount(ctx, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseUserOperationsCount", reflect.TypeOf((*MockDbService)(nil).DecreaseUserOperationsCount), ctx, owner)
}

// GetOperation mocks base method.
func (m *MockDbService) GetOperation(ctx context.Context, opID string) (mongo.AAUserOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", ctx, opID)
	ret0, _ := ret[0].(mongo.AAUserOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockDbServiceMockRecorder) GetOperation(ctx, opID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockDbService)(nil).GetOperation), ctx, opID)
}

// GetUserOperationsCount mocks base method.
func (m *MockDbService) GetUserOperationsCount(ctx context.Context, owner common.Address, ownerAnyID string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOperationsCount", ctx, owner, ownerAnyID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOperationsCount indicates an expected call of GetUserOperationsCount.
func (mr *MockDbServiceMockRecorder) GetUserOperationsCount(ctx, owner, ownerAnyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOperationsCount", reflect.TypeOf((*MockDbService)(nil).GetUserOperationsCount), ctx, owner, ownerAnyID)
}

// Init mocks base method.
func (m *MockDbService) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockDbServiceMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDbService)(nil).Init), a)
}

// Name mocks base method.
func (m *MockDbService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDbServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDbService)(nil).Name))
}

// SaveOperation mocks base method.
func (m *MockDbService) SaveOperation(ctx context.Context, opID string, cuor nameserviceproto.CreateUserOperationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOperation", ctx, opID, cuor)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOperation indicates an expected call of SaveOperation.
func (mr *MockDbServiceMockRecorder) SaveOperation(ctx, opID, cuor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOperation", reflect.TypeOf((*MockDbService)(nil).SaveOperation), ctx, opID, cuor)
}
