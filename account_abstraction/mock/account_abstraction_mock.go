// Code generated by MockGen. DO NOT EDIT.
// Source: account_abstraction/account_abstraction.go

// Package mock_accountabstraction is a generated GoMock package.
package mock_accountabstraction

import (
	context "context"
	big "math/big"
	reflect "reflect"

	anyns_api "github.com/anyproto/any-ns-node/pb/anyns_api"
	app "github.com/anyproto/any-sync/app"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountAbstractionService is a mock of AccountAbstractionService interface.
type MockAccountAbstractionService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAbstractionServiceMockRecorder
}

// MockAccountAbstractionServiceMockRecorder is the mock recorder for MockAccountAbstractionService.
type MockAccountAbstractionServiceMockRecorder struct {
	mock *MockAccountAbstractionService
}

// NewMockAccountAbstractionService creates a new mock instance.
func NewMockAccountAbstractionService(ctrl *gomock.Controller) *MockAccountAbstractionService {
	mock := &MockAccountAbstractionService{ctrl: ctrl}
	mock.recorder = &MockAccountAbstractionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountAbstractionService) EXPECT() *MockAccountAbstractionServiceMockRecorder {
	return m.recorder
}

// AdminMintAccessTokens mocks base method.
func (m *MockAccountAbstractionService) AdminMintAccessTokens(ctx context.Context, scw common.Address, amount *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminMintAccessTokens", ctx, scw, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminMintAccessTokens indicates an expected call of AdminMintAccessTokens.
func (mr *MockAccountAbstractionServiceMockRecorder) AdminMintAccessTokens(ctx, scw, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminMintAccessTokens", reflect.TypeOf((*MockAccountAbstractionService)(nil).AdminMintAccessTokens), ctx, scw, amount)
}

// AdminVerifyIdentity mocks base method.
func (m *MockAccountAbstractionService) AdminVerifyIdentity(payload, signature []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminVerifyIdentity", payload, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminVerifyIdentity indicates an expected call of AdminVerifyIdentity.
func (mr *MockAccountAbstractionServiceMockRecorder) AdminVerifyIdentity(payload, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminVerifyIdentity", reflect.TypeOf((*MockAccountAbstractionService)(nil).AdminVerifyIdentity), payload, signature)
}

// GetDataNameRegister mocks base method.
func (m *MockAccountAbstractionService) GetDataNameRegister(ctx context.Context, in *anyns_api.NameRegisterRequest) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataNameRegister", ctx, in)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDataNameRegister indicates an expected call of GetDataNameRegister.
func (mr *MockAccountAbstractionServiceMockRecorder) GetDataNameRegister(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataNameRegister", reflect.TypeOf((*MockAccountAbstractionService)(nil).GetDataNameRegister), ctx, in)
}

// GetNamesCountLeft mocks base method.
func (m *MockAccountAbstractionService) GetNamesCountLeft(ctx context.Context, scw common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamesCountLeft", ctx, scw)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamesCountLeft indicates an expected call of GetNamesCountLeft.
func (mr *MockAccountAbstractionServiceMockRecorder) GetNamesCountLeft(ctx, scw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamesCountLeft", reflect.TypeOf((*MockAccountAbstractionService)(nil).GetNamesCountLeft), ctx, scw)
}

// GetOperationsCountLeft mocks base method.
func (m *MockAccountAbstractionService) GetOperationsCountLeft(ctx context.Context, scw common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsCountLeft", ctx, scw)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsCountLeft indicates an expected call of GetOperationsCountLeft.
func (mr *MockAccountAbstractionServiceMockRecorder) GetOperationsCountLeft(ctx, scw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsCountLeft", reflect.TypeOf((*MockAccountAbstractionService)(nil).GetOperationsCountLeft), ctx, scw)
}

// GetSmartWalletAddress mocks base method.
func (m *MockAccountAbstractionService) GetSmartWalletAddress(ctx context.Context, eoa common.Address) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSmartWalletAddress", ctx, eoa)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSmartWalletAddress indicates an expected call of GetSmartWalletAddress.
func (mr *MockAccountAbstractionServiceMockRecorder) GetSmartWalletAddress(ctx, eoa interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSmartWalletAddress", reflect.TypeOf((*MockAccountAbstractionService)(nil).GetSmartWalletAddress), ctx, eoa)
}

// Init mocks base method.
func (m *MockAccountAbstractionService) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockAccountAbstractionServiceMockRecorder) Init(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAccountAbstractionService)(nil).Init), a)
}

// Name mocks base method.
func (m *MockAccountAbstractionService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAccountAbstractionServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAccountAbstractionService)(nil).Name))
}

// SendUserOperation mocks base method.
func (m *MockAccountAbstractionService) SendUserOperation(ctx context.Context, contextData, signedByUserData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUserOperation", ctx, contextData, signedByUserData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUserOperation indicates an expected call of SendUserOperation.
func (mr *MockAccountAbstractionServiceMockRecorder) SendUserOperation(ctx, contextData, signedByUserData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserOperation", reflect.TypeOf((*MockAccountAbstractionService)(nil).SendUserOperation), ctx, contextData, signedByUserData)
}
