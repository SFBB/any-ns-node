// Code generated by MockGen. DO NOT EDIT.
// Source: alchemysdk/alchemysdk.go

// Package mock_alchemysdk is a generated GoMock package.
package mock_alchemysdk

import (
	reflect "reflect"

	alchemysdk "github.com/anyproto/any-ns-node/alchemysdk"
	app "github.com/anyproto/any-sync/app"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockEntryPointAddress is a mock of EntryPointAddress interface.
type MockEntryPointAddress struct {
	ctrl     *gomock.Controller
	recorder *MockEntryPointAddressMockRecorder
}

// MockEntryPointAddressMockRecorder is the mock recorder for MockEntryPointAddress.
type MockEntryPointAddressMockRecorder struct {
	mock *MockEntryPointAddress
}

// NewMockEntryPointAddress creates a new mock instance.
func NewMockEntryPointAddress(ctrl *gomock.Controller) *MockEntryPointAddress {
	mock := &MockEntryPointAddress{ctrl: ctrl}
	mock.recorder = &MockEntryPointAddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryPointAddress) EXPECT() *MockEntryPointAddressMockRecorder {
	return m.recorder
}

// MockAlchemyAAService is a mock of AlchemyAAService interface.
type MockAlchemyAAService struct {
	ctrl     *gomock.Controller
	recorder *MockAlchemyAAServiceMockRecorder
}

// MockAlchemyAAServiceMockRecorder is the mock recorder for MockAlchemyAAService.
type MockAlchemyAAServiceMockRecorder struct {
	mock *MockAlchemyAAService
}

// NewMockAlchemyAAService creates a new mock instance.
func NewMockAlchemyAAService(ctrl *gomock.Controller) *MockAlchemyAAService {
	mock := &MockAlchemyAAService{ctrl: ctrl}
	mock.recorder = &MockAlchemyAAServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlchemyAAService) EXPECT() *MockAlchemyAAServiceMockRecorder {
	return m.recorder
}

// CreateRequestAndSign mocks base method.
func (m *MockAlchemyAAService) CreateRequestAndSign(callData []byte, rgap alchemysdk.JSONRPCResponseGasAndPaymaster, chainID int64, entryPointAddr, sender, senderScw common.Address, nonce uint64, id int, myPK string, factoryAddr common.Address, appendEntryPoint bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequestAndSign", callData, rgap, chainID, entryPointAddr, sender, senderScw, nonce, id, myPK, factoryAddr, appendEntryPoint)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequestAndSign indicates an expected call of CreateRequestAndSign.
func (mr *MockAlchemyAAServiceMockRecorder) CreateRequestAndSign(callData, rgap, chainID, entryPointAddr, sender, senderScw, nonce, id, myPK, factoryAddr, appendEntryPoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequestAndSign", reflect.TypeOf((*MockAlchemyAAService)(nil).CreateRequestAndSign), callData, rgap, chainID, entryPointAddr, sender, senderScw, nonce, id, myPK, factoryAddr, appendEntryPoint)
}

// CreateRequestGasAndPaymasterData mocks base method.
func (m *MockAlchemyAAService) CreateRequestGasAndPaymasterData(callData []byte, sender, senderScw common.Address, nonce uint64, policyID string, entryPointAddr, factoryAddr common.Address, id int) (alchemysdk.JSONRPCRequestGasAndPaymaster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequestGasAndPaymasterData", callData, sender, senderScw, nonce, policyID, entryPointAddr, factoryAddr, id)
	ret0, _ := ret[0].(alchemysdk.JSONRPCRequestGasAndPaymaster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequestGasAndPaymasterData indicates an expected call of CreateRequestGasAndPaymasterData.
func (mr *MockAlchemyAAServiceMockRecorder) CreateRequestGasAndPaymasterData(callData, sender, senderScw, nonce, policyID, entryPointAddr, factoryAddr, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequestGasAndPaymasterData", reflect.TypeOf((*MockAlchemyAAService)(nil).CreateRequestGasAndPaymasterData), callData, sender, senderScw, nonce, policyID, entryPointAddr, factoryAddr, id)
}

// CreateRequestGetUserOperation mocks base method.
func (m *MockAlchemyAAService) CreateRequestGetUserOperation(operationHash string, id int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequestGetUserOperation", operationHash, id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequestGetUserOperation indicates an expected call of CreateRequestGetUserOperation.
func (mr *MockAlchemyAAServiceMockRecorder) CreateRequestGetUserOperation(operationHash, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequestGetUserOperation", reflect.TypeOf((*MockAlchemyAAService)(nil).CreateRequestGetUserOperation), operationHash, id)
}

// CreateRequestStep1 mocks base method.
func (m *MockAlchemyAAService) CreateRequestStep1(callData []byte, rgap alchemysdk.JSONRPCResponseGasAndPaymaster, chainID int64, entryPointAddr, sender common.Address, nonce uint64) ([]byte, alchemysdk.UserOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequestStep1", callData, rgap, chainID, entryPointAddr, sender, nonce)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(alchemysdk.UserOperation)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRequestStep1 indicates an expected call of CreateRequestStep1.
func (mr *MockAlchemyAAServiceMockRecorder) CreateRequestStep1(callData, rgap, chainID, entryPointAddr, sender, nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequestStep1", reflect.TypeOf((*MockAlchemyAAService)(nil).CreateRequestStep1), callData, rgap, chainID, entryPointAddr, sender, nonce)
}

// CreateRequestStep2 mocks base method.
func (m *MockAlchemyAAService) CreateRequestStep2(alchemyRequestId int, signedByUserData []byte, uo alchemysdk.UserOperation, entryPointAddr common.Address) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequestStep2", alchemyRequestId, signedByUserData, uo, entryPointAddr)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequestStep2 indicates an expected call of CreateRequestStep2.
func (mr *MockAlchemyAAServiceMockRecorder) CreateRequestStep2(alchemyRequestId, signedByUserData, uo, entryPointAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequestStep2", reflect.TypeOf((*MockAlchemyAAService)(nil).CreateRequestStep2), alchemyRequestId, signedByUserData, uo, entryPointAddr)
}

// DecodeSendUserOperationResponse mocks base method.
func (m *MockAlchemyAAService) DecodeSendUserOperationResponse(response []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeSendUserOperationResponse", response)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeSendUserOperationResponse indicates an expected call of DecodeSendUserOperationResponse.
func (mr *MockAlchemyAAServiceMockRecorder) DecodeSendUserOperationResponse(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeSendUserOperationResponse", reflect.TypeOf((*MockAlchemyAAService)(nil).DecodeSendUserOperationResponse), response)
}

// GetAccountInitCode mocks base method.
func (m *MockAlchemyAAService) GetAccountInitCode(eoa, factoryAddr common.Address) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInitCode", eoa, factoryAddr)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInitCode indicates an expected call of GetAccountInitCode.
func (mr *MockAlchemyAAServiceMockRecorder) GetAccountInitCode(eoa, factoryAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInitCode", reflect.TypeOf((*MockAlchemyAAService)(nil).GetAccountInitCode), eoa, factoryAddr)
}

// Init mocks base method.
func (m *MockAlchemyAAService) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockAlchemyAAServiceMockRecorder) Init(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAlchemyAAService)(nil).Init), a)
}

// Name mocks base method.
func (m *MockAlchemyAAService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAlchemyAAServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAlchemyAAService)(nil).Name))
}

// SendRequest mocks base method.
func (m *MockAlchemyAAService) SendRequest(apiKey string, jsonDATA []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", apiKey, jsonDATA)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockAlchemyAAServiceMockRecorder) SendRequest(apiKey, jsonDATA interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockAlchemyAAService)(nil).SendRequest), apiKey, jsonDATA)
}
