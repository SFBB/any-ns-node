syntax = "proto3";
option go_package = "pb/anyns_api";

message UserAccount {
  // An Ethereum address that owns that account
  string ownerEthAddress = 1;

  // This smart contract really controls all names
  // you can ask .owner() method to get 'ownerEthAddress'
  string ownerSmartContracWalletAddress = 2;

  // Number of names that user can buy. We will mint him tokens that he can use to buy names
  // (one token per name)
  uint64 namesCountLeft = 3;

  // Number of gas operations: update name, add new data, etc
  uint64 operationsCountLeft = 4;
}

message AdminFundUserAccountRequest {
  // An Ethereum address that owns that name
  string ownerEthAddress = 1;

  // Number of names that user can buy. We will mint him tokens that he can use to buy names
  // (one token per name)
  uint64 namesCount = 2;
}

message AdminFundUserAccountRequestSigned {
  // AdminFundUserAccountRequest struct
  bytes payload = 1;

  // payload signed by Admin of this service 
  bytes signature = 2; 
}

message AdminFundGasOperationsRequest {
  // An Ethereum address that owns that name
  string ownerEthAddress = 1;

  // Number of gas operations: update name, add new data, etc
  uint64 operationsCount = 2;
}

message AdminFundGasOperationsRequestSigned {
  // AdminFundGasOperationsRequest struct
  bytes payload = 1;

  // payload signed by Admin of this service
  bytes signature = 2; 
}

// no signature required here
message GetUserAccountRequest {
  // An Ethereum address that owns that account
  string ownerEthAddress = 1;
}


service AnynsAccountAbstraction {
// ADMIN METHODS:
  // Will send "name tokens" to the user's account 
  //   (user will be able to use these tokens to register his name later directly)
  rpc AdminFundUserAccount(AdminFundUserAccountRequestSigned) returns (UserAccount) {}
  
  // Will add "gas operations" to the user's AA account 
  //   (user will be able to send TXs to EVM chain without having any gas in his wallet)
  rpc AdminFundGasOperations(AdminFundGasOperationsRequestSigned) returns (UserAccount) {}

// USER METHODS:
  // Use it:
  // 1 - get your SmartContractWallet address
  // 2 - get how many operations you still have
  rpc GetUserAccount(GetUserAccountRequest) returns (UserAccount) {}
}
