// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.33
// source: proto/anyns_api_server.proto

package anyns_api_server

import (
	bytes "bytes"
	context "context"
	errors "errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_proto_anyns_api_server_proto struct{}

func (drpcEncoding_File_proto_anyns_api_server_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_proto_anyns_api_server_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_proto_anyns_api_server_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_proto_anyns_api_server_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCAnynsClient interface {
	DRPCConn() drpc.Conn

	IsNameAvailable(ctx context.Context, in *NameAvailableRequest) (*NameAvailableResponse, error)
	NameRegister(ctx context.Context, in *NameRegisterRequest) (*OperationResponse, error)
	NameRegisterSigned(ctx context.Context, in *NameRegisterSignedRequest) (*OperationResponse, error)
	GetOperationStatus(ctx context.Context, in *GetOperationStatusRequest) (*OperationResponse, error)
}

type drpcAnynsClient struct {
	cc drpc.Conn
}

func NewDRPCAnynsClient(cc drpc.Conn) DRPCAnynsClient {
	return &drpcAnynsClient{cc}
}

func (c *drpcAnynsClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcAnynsClient) IsNameAvailable(ctx context.Context, in *NameAvailableRequest) (*NameAvailableResponse, error) {
	out := new(NameAvailableResponse)
	err := c.cc.Invoke(ctx, "/Anyns/IsNameAvailable", drpcEncoding_File_proto_anyns_api_server_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAnynsClient) NameRegister(ctx context.Context, in *NameRegisterRequest) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/Anyns/NameRegister", drpcEncoding_File_proto_anyns_api_server_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAnynsClient) NameRegisterSigned(ctx context.Context, in *NameRegisterSignedRequest) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/Anyns/NameRegisterSigned", drpcEncoding_File_proto_anyns_api_server_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAnynsClient) GetOperationStatus(ctx context.Context, in *GetOperationStatusRequest) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/Anyns/GetOperationStatus", drpcEncoding_File_proto_anyns_api_server_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCAnynsServer interface {
	IsNameAvailable(context.Context, *NameAvailableRequest) (*NameAvailableResponse, error)
	NameRegister(context.Context, *NameRegisterRequest) (*OperationResponse, error)
	NameRegisterSigned(context.Context, *NameRegisterSignedRequest) (*OperationResponse, error)
	GetOperationStatus(context.Context, *GetOperationStatusRequest) (*OperationResponse, error)
}

type DRPCAnynsUnimplementedServer struct{}

func (s *DRPCAnynsUnimplementedServer) IsNameAvailable(context.Context, *NameAvailableRequest) (*NameAvailableResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAnynsUnimplementedServer) NameRegister(context.Context, *NameRegisterRequest) (*OperationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAnynsUnimplementedServer) NameRegisterSigned(context.Context, *NameRegisterSignedRequest) (*OperationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAnynsUnimplementedServer) GetOperationStatus(context.Context, *GetOperationStatusRequest) (*OperationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCAnynsDescription struct{}

func (DRPCAnynsDescription) NumMethods() int { return 4 }

func (DRPCAnynsDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/Anyns/IsNameAvailable", drpcEncoding_File_proto_anyns_api_server_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAnynsServer).
					IsNameAvailable(
						ctx,
						in1.(*NameAvailableRequest),
					)
			}, DRPCAnynsServer.IsNameAvailable, true
	case 1:
		return "/Anyns/NameRegister", drpcEncoding_File_proto_anyns_api_server_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAnynsServer).
					NameRegister(
						ctx,
						in1.(*NameRegisterRequest),
					)
			}, DRPCAnynsServer.NameRegister, true
	case 2:
		return "/Anyns/NameRegisterSigned", drpcEncoding_File_proto_anyns_api_server_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAnynsServer).
					NameRegisterSigned(
						ctx,
						in1.(*NameRegisterSignedRequest),
					)
			}, DRPCAnynsServer.NameRegisterSigned, true
	case 3:
		return "/Anyns/GetOperationStatus", drpcEncoding_File_proto_anyns_api_server_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAnynsServer).
					GetOperationStatus(
						ctx,
						in1.(*GetOperationStatusRequest),
					)
			}, DRPCAnynsServer.GetOperationStatus, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterAnyns(mux drpc.Mux, impl DRPCAnynsServer) error {
	return mux.Register(impl, DRPCAnynsDescription{})
}

type DRPCAnyns_IsNameAvailableStream interface {
	drpc.Stream
	SendAndClose(*NameAvailableResponse) error
}

type drpcAnyns_IsNameAvailableStream struct {
	drpc.Stream
}

func (x *drpcAnyns_IsNameAvailableStream) SendAndClose(m *NameAvailableResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_proto_anyns_api_server_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAnyns_NameRegisterStream interface {
	drpc.Stream
	SendAndClose(*OperationResponse) error
}

type drpcAnyns_NameRegisterStream struct {
	drpc.Stream
}

func (x *drpcAnyns_NameRegisterStream) SendAndClose(m *OperationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_proto_anyns_api_server_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAnyns_NameRegisterSignedStream interface {
	drpc.Stream
	SendAndClose(*OperationResponse) error
}

type drpcAnyns_NameRegisterSignedStream struct {
	drpc.Stream
}

func (x *drpcAnyns_NameRegisterSignedStream) SendAndClose(m *OperationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_proto_anyns_api_server_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAnyns_GetOperationStatusStream interface {
	drpc.Stream
	SendAndClose(*OperationResponse) error
}

type drpcAnyns_GetOperationStatusStream struct {
	drpc.Stream
}

func (x *drpcAnyns_GetOperationStatusStream) SendAndClose(m *OperationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_proto_anyns_api_server_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
