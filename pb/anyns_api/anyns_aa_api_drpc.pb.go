// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.33
// source: proto/anyns_aa_api.proto

package anyns_api

import (
	bytes "bytes"
	context "context"
	errors "errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_proto_anyns_aa_api_proto struct{}

func (drpcEncoding_File_proto_anyns_aa_api_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_proto_anyns_aa_api_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_proto_anyns_aa_api_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_proto_anyns_aa_api_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCAnynsAccountAbstractionClient interface {
	DRPCConn() drpc.Conn

	AdminFundUserAccount(ctx context.Context, in *AdminFundUserAccountRequestSigned) (*UserAccount, error)
	AdminFundGasOperations(ctx context.Context, in *AdminFundGasOperationsRequestSigned) (*UserAccount, error)
	GetUserAccount(ctx context.Context, in *GetUserAccountRequest) (*UserAccount, error)
}

type drpcAnynsAccountAbstractionClient struct {
	cc drpc.Conn
}

func NewDRPCAnynsAccountAbstractionClient(cc drpc.Conn) DRPCAnynsAccountAbstractionClient {
	return &drpcAnynsAccountAbstractionClient{cc}
}

func (c *drpcAnynsAccountAbstractionClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcAnynsAccountAbstractionClient) AdminFundUserAccount(ctx context.Context, in *AdminFundUserAccountRequestSigned) (*UserAccount, error) {
	out := new(UserAccount)
	err := c.cc.Invoke(ctx, "/AnynsAccountAbstraction/AdminFundUserAccount", drpcEncoding_File_proto_anyns_aa_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAnynsAccountAbstractionClient) AdminFundGasOperations(ctx context.Context, in *AdminFundGasOperationsRequestSigned) (*UserAccount, error) {
	out := new(UserAccount)
	err := c.cc.Invoke(ctx, "/AnynsAccountAbstraction/AdminFundGasOperations", drpcEncoding_File_proto_anyns_aa_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAnynsAccountAbstractionClient) GetUserAccount(ctx context.Context, in *GetUserAccountRequest) (*UserAccount, error) {
	out := new(UserAccount)
	err := c.cc.Invoke(ctx, "/AnynsAccountAbstraction/GetUserAccount", drpcEncoding_File_proto_anyns_aa_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCAnynsAccountAbstractionServer interface {
	AdminFundUserAccount(context.Context, *AdminFundUserAccountRequestSigned) (*UserAccount, error)
	AdminFundGasOperations(context.Context, *AdminFundGasOperationsRequestSigned) (*UserAccount, error)
	GetUserAccount(context.Context, *GetUserAccountRequest) (*UserAccount, error)
}

type DRPCAnynsAccountAbstractionUnimplementedServer struct{}

func (s *DRPCAnynsAccountAbstractionUnimplementedServer) AdminFundUserAccount(context.Context, *AdminFundUserAccountRequestSigned) (*UserAccount, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAnynsAccountAbstractionUnimplementedServer) AdminFundGasOperations(context.Context, *AdminFundGasOperationsRequestSigned) (*UserAccount, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAnynsAccountAbstractionUnimplementedServer) GetUserAccount(context.Context, *GetUserAccountRequest) (*UserAccount, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCAnynsAccountAbstractionDescription struct{}

func (DRPCAnynsAccountAbstractionDescription) NumMethods() int { return 3 }

func (DRPCAnynsAccountAbstractionDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/AnynsAccountAbstraction/AdminFundUserAccount", drpcEncoding_File_proto_anyns_aa_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAnynsAccountAbstractionServer).
					AdminFundUserAccount(
						ctx,
						in1.(*AdminFundUserAccountRequestSigned),
					)
			}, DRPCAnynsAccountAbstractionServer.AdminFundUserAccount, true
	case 1:
		return "/AnynsAccountAbstraction/AdminFundGasOperations", drpcEncoding_File_proto_anyns_aa_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAnynsAccountAbstractionServer).
					AdminFundGasOperations(
						ctx,
						in1.(*AdminFundGasOperationsRequestSigned),
					)
			}, DRPCAnynsAccountAbstractionServer.AdminFundGasOperations, true
	case 2:
		return "/AnynsAccountAbstraction/GetUserAccount", drpcEncoding_File_proto_anyns_aa_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAnynsAccountAbstractionServer).
					GetUserAccount(
						ctx,
						in1.(*GetUserAccountRequest),
					)
			}, DRPCAnynsAccountAbstractionServer.GetUserAccount, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterAnynsAccountAbstraction(mux drpc.Mux, impl DRPCAnynsAccountAbstractionServer) error {
	return mux.Register(impl, DRPCAnynsAccountAbstractionDescription{})
}

type DRPCAnynsAccountAbstraction_AdminFundUserAccountStream interface {
	drpc.Stream
	SendAndClose(*UserAccount) error
}

type drpcAnynsAccountAbstraction_AdminFundUserAccountStream struct {
	drpc.Stream
}

func (x *drpcAnynsAccountAbstraction_AdminFundUserAccountStream) SendAndClose(m *UserAccount) error {
	if err := x.MsgSend(m, drpcEncoding_File_proto_anyns_aa_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAnynsAccountAbstraction_AdminFundGasOperationsStream interface {
	drpc.Stream
	SendAndClose(*UserAccount) error
}

type drpcAnynsAccountAbstraction_AdminFundGasOperationsStream struct {
	drpc.Stream
}

func (x *drpcAnynsAccountAbstraction_AdminFundGasOperationsStream) SendAndClose(m *UserAccount) error {
	if err := x.MsgSend(m, drpcEncoding_File_proto_anyns_aa_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAnynsAccountAbstraction_GetUserAccountStream interface {
	drpc.Stream
	SendAndClose(*UserAccount) error
}

type drpcAnynsAccountAbstraction_GetUserAccountStream struct {
	drpc.Stream
}

func (x *drpcAnynsAccountAbstraction_GetUserAccountStream) SendAndClose(m *UserAccount) error {
	if err := x.MsgSend(m, drpcEncoding_File_proto_anyns_aa_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
