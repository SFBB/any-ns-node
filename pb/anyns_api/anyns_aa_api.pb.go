// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/anyns_aa_api.proto

package anyns_api

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserAccount struct {
	// An Ethereum address that owns that account
	OwnerEthAddress string `protobuf:"bytes,1,opt,name=ownerEthAddress,proto3" json:"ownerEthAddress,omitempty"`
	// This smart contract really controls all names
	// you can ask .owner() method to get 'ownerEthAddress'
	OwnerSmartContracWalletAddress string `protobuf:"bytes,2,opt,name=ownerSmartContracWalletAddress,proto3" json:"ownerSmartContracWalletAddress,omitempty"`
	// Number of names that user can buy. We will mint him tokens that he can use to buy names
	// (one token per name)
	NamesCountLeft uint64 `protobuf:"varint,3,opt,name=namesCountLeft,proto3" json:"namesCountLeft,omitempty"`
	// Number of gas operations: update name, add new data, etc
	OperationsCountLeft uint64 `protobuf:"varint,4,opt,name=operationsCountLeft,proto3" json:"operationsCountLeft,omitempty"`
}

func (m *UserAccount) Reset()         { *m = UserAccount{} }
func (m *UserAccount) String() string { return proto.CompactTextString(m) }
func (*UserAccount) ProtoMessage()    {}
func (*UserAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c3ef0119950453, []int{0}
}
func (m *UserAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAccount.Merge(m, src)
}
func (m *UserAccount) XXX_Size() int {
	return m.Size()
}
func (m *UserAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAccount.DiscardUnknown(m)
}

var xxx_messageInfo_UserAccount proto.InternalMessageInfo

func (m *UserAccount) GetOwnerEthAddress() string {
	if m != nil {
		return m.OwnerEthAddress
	}
	return ""
}

func (m *UserAccount) GetOwnerSmartContracWalletAddress() string {
	if m != nil {
		return m.OwnerSmartContracWalletAddress
	}
	return ""
}

func (m *UserAccount) GetNamesCountLeft() uint64 {
	if m != nil {
		return m.NamesCountLeft
	}
	return 0
}

func (m *UserAccount) GetOperationsCountLeft() uint64 {
	if m != nil {
		return m.OperationsCountLeft
	}
	return 0
}

type AdminFundUserAccountRequest struct {
	// An Ethereum address that owns that name
	OwnerEthAddress string `protobuf:"bytes,1,opt,name=ownerEthAddress,proto3" json:"ownerEthAddress,omitempty"`
	// Number of names that user can buy. We will mint him tokens that he can use to buy names
	// (one token per name)
	NamesCount uint64 `protobuf:"varint,2,opt,name=namesCount,proto3" json:"namesCount,omitempty"`
}

func (m *AdminFundUserAccountRequest) Reset()         { *m = AdminFundUserAccountRequest{} }
func (m *AdminFundUserAccountRequest) String() string { return proto.CompactTextString(m) }
func (*AdminFundUserAccountRequest) ProtoMessage()    {}
func (*AdminFundUserAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c3ef0119950453, []int{1}
}
func (m *AdminFundUserAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminFundUserAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminFundUserAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminFundUserAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminFundUserAccountRequest.Merge(m, src)
}
func (m *AdminFundUserAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *AdminFundUserAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminFundUserAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminFundUserAccountRequest proto.InternalMessageInfo

func (m *AdminFundUserAccountRequest) GetOwnerEthAddress() string {
	if m != nil {
		return m.OwnerEthAddress
	}
	return ""
}

func (m *AdminFundUserAccountRequest) GetNamesCount() uint64 {
	if m != nil {
		return m.NamesCount
	}
	return 0
}

type AdminFundUserAccountRequestSigned struct {
	// AdminFundUserAccountRequest struct
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// payload signed by Admin of this service
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *AdminFundUserAccountRequestSigned) Reset()         { *m = AdminFundUserAccountRequestSigned{} }
func (m *AdminFundUserAccountRequestSigned) String() string { return proto.CompactTextString(m) }
func (*AdminFundUserAccountRequestSigned) ProtoMessage()    {}
func (*AdminFundUserAccountRequestSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c3ef0119950453, []int{2}
}
func (m *AdminFundUserAccountRequestSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminFundUserAccountRequestSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminFundUserAccountRequestSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminFundUserAccountRequestSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminFundUserAccountRequestSigned.Merge(m, src)
}
func (m *AdminFundUserAccountRequestSigned) XXX_Size() int {
	return m.Size()
}
func (m *AdminFundUserAccountRequestSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminFundUserAccountRequestSigned.DiscardUnknown(m)
}

var xxx_messageInfo_AdminFundUserAccountRequestSigned proto.InternalMessageInfo

func (m *AdminFundUserAccountRequestSigned) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *AdminFundUserAccountRequestSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type AdminFundGasOperationsRequest struct {
	// An Ethereum address that owns that name
	OwnerEthAddress string `protobuf:"bytes,1,opt,name=ownerEthAddress,proto3" json:"ownerEthAddress,omitempty"`
	// Number of gas operations: update name, add new data, etc
	OperationsCount uint64 `protobuf:"varint,2,opt,name=operationsCount,proto3" json:"operationsCount,omitempty"`
}

func (m *AdminFundGasOperationsRequest) Reset()         { *m = AdminFundGasOperationsRequest{} }
func (m *AdminFundGasOperationsRequest) String() string { return proto.CompactTextString(m) }
func (*AdminFundGasOperationsRequest) ProtoMessage()    {}
func (*AdminFundGasOperationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c3ef0119950453, []int{3}
}
func (m *AdminFundGasOperationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminFundGasOperationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminFundGasOperationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminFundGasOperationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminFundGasOperationsRequest.Merge(m, src)
}
func (m *AdminFundGasOperationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AdminFundGasOperationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminFundGasOperationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminFundGasOperationsRequest proto.InternalMessageInfo

func (m *AdminFundGasOperationsRequest) GetOwnerEthAddress() string {
	if m != nil {
		return m.OwnerEthAddress
	}
	return ""
}

func (m *AdminFundGasOperationsRequest) GetOperationsCount() uint64 {
	if m != nil {
		return m.OperationsCount
	}
	return 0
}

type AdminFundGasOperationsRequestSigned struct {
	// AdminFundGasOperationsRequest struct
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// payload signed by Admin of this service
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *AdminFundGasOperationsRequestSigned) Reset()         { *m = AdminFundGasOperationsRequestSigned{} }
func (m *AdminFundGasOperationsRequestSigned) String() string { return proto.CompactTextString(m) }
func (*AdminFundGasOperationsRequestSigned) ProtoMessage()    {}
func (*AdminFundGasOperationsRequestSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c3ef0119950453, []int{4}
}
func (m *AdminFundGasOperationsRequestSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminFundGasOperationsRequestSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminFundGasOperationsRequestSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminFundGasOperationsRequestSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminFundGasOperationsRequestSigned.Merge(m, src)
}
func (m *AdminFundGasOperationsRequestSigned) XXX_Size() int {
	return m.Size()
}
func (m *AdminFundGasOperationsRequestSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminFundGasOperationsRequestSigned.DiscardUnknown(m)
}

var xxx_messageInfo_AdminFundGasOperationsRequestSigned proto.InternalMessageInfo

func (m *AdminFundGasOperationsRequestSigned) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *AdminFundGasOperationsRequestSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// no signature required here
type GetUserAccountRequest struct {
	// An Ethereum address that owns that account
	OwnerEthAddress string `protobuf:"bytes,1,opt,name=ownerEthAddress,proto3" json:"ownerEthAddress,omitempty"`
}

func (m *GetUserAccountRequest) Reset()         { *m = GetUserAccountRequest{} }
func (m *GetUserAccountRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserAccountRequest) ProtoMessage()    {}
func (*GetUserAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c3ef0119950453, []int{5}
}
func (m *GetUserAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserAccountRequest.Merge(m, src)
}
func (m *GetUserAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserAccountRequest proto.InternalMessageInfo

func (m *GetUserAccountRequest) GetOwnerEthAddress() string {
	if m != nil {
		return m.OwnerEthAddress
	}
	return ""
}

type GetDataNameRegisterResponse struct {
	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Context []byte `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *GetDataNameRegisterResponse) Reset()         { *m = GetDataNameRegisterResponse{} }
func (m *GetDataNameRegisterResponse) String() string { return proto.CompactTextString(m) }
func (*GetDataNameRegisterResponse) ProtoMessage()    {}
func (*GetDataNameRegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c3ef0119950453, []int{6}
}
func (m *GetDataNameRegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDataNameRegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDataNameRegisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDataNameRegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataNameRegisterResponse.Merge(m, src)
}
func (m *GetDataNameRegisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDataNameRegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataNameRegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataNameRegisterResponse proto.InternalMessageInfo

func (m *GetDataNameRegisterResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetDataNameRegisterResponse) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

type CreateUserOperationRequest struct {
	Data       []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	SignedData []byte `protobuf:"bytes,2,opt,name=signedData,proto3" json:"signedData,omitempty"`
	Context    []byte `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *CreateUserOperationRequest) Reset()         { *m = CreateUserOperationRequest{} }
func (m *CreateUserOperationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateUserOperationRequest) ProtoMessage()    {}
func (*CreateUserOperationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c3ef0119950453, []int{7}
}
func (m *CreateUserOperationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUserOperationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUserOperationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUserOperationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserOperationRequest.Merge(m, src)
}
func (m *CreateUserOperationRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateUserOperationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserOperationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserOperationRequest proto.InternalMessageInfo

func (m *CreateUserOperationRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateUserOperationRequest) GetSignedData() []byte {
	if m != nil {
		return m.SignedData
	}
	return nil
}

func (m *CreateUserOperationRequest) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

type CreateUserOperationRequestSigned struct {
	// CreateUserOperationRequest struct
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// payload signed with Anytype identity
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *CreateUserOperationRequestSigned) Reset()         { *m = CreateUserOperationRequestSigned{} }
func (m *CreateUserOperationRequestSigned) String() string { return proto.CompactTextString(m) }
func (*CreateUserOperationRequestSigned) ProtoMessage()    {}
func (*CreateUserOperationRequestSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c3ef0119950453, []int{8}
}
func (m *CreateUserOperationRequestSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUserOperationRequestSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUserOperationRequestSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUserOperationRequestSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserOperationRequestSigned.Merge(m, src)
}
func (m *CreateUserOperationRequestSigned) XXX_Size() int {
	return m.Size()
}
func (m *CreateUserOperationRequestSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserOperationRequestSigned.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserOperationRequestSigned proto.InternalMessageInfo

func (m *CreateUserOperationRequestSigned) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *CreateUserOperationRequestSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*UserAccount)(nil), "UserAccount")
	proto.RegisterType((*AdminFundUserAccountRequest)(nil), "AdminFundUserAccountRequest")
	proto.RegisterType((*AdminFundUserAccountRequestSigned)(nil), "AdminFundUserAccountRequestSigned")
	proto.RegisterType((*AdminFundGasOperationsRequest)(nil), "AdminFundGasOperationsRequest")
	proto.RegisterType((*AdminFundGasOperationsRequestSigned)(nil), "AdminFundGasOperationsRequestSigned")
	proto.RegisterType((*GetUserAccountRequest)(nil), "GetUserAccountRequest")
	proto.RegisterType((*GetDataNameRegisterResponse)(nil), "GetDataNameRegisterResponse")
	proto.RegisterType((*CreateUserOperationRequest)(nil), "CreateUserOperationRequest")
	proto.RegisterType((*CreateUserOperationRequestSigned)(nil), "CreateUserOperationRequestSigned")
}

func init() { proto.RegisterFile("proto/anyns_aa_api.proto", fileDescriptor_36c3ef0119950453) }

var fileDescriptor_36c3ef0119950453 = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xb5, 0x49, 0x04, 0xea, 0x10, 0x15, 0x69, 0xd3, 0x96, 0x28, 0x2d, 0x56, 0xba, 0xa0, 0x2a,
	0x27, 0x83, 0xe0, 0xc2, 0xd5, 0x04, 0x9a, 0x43, 0x51, 0x41, 0x2e, 0x08, 0xa9, 0x08, 0x55, 0x93,
	0x78, 0x08, 0x46, 0xc9, 0xae, 0xd9, 0xdd, 0x08, 0xfa, 0x2f, 0x38, 0xf2, 0x93, 0x38, 0xf6, 0x08,
	0x37, 0x94, 0xfc, 0x11, 0xe4, 0x6d, 0x3e, 0xec, 0xc8, 0x4d, 0x5a, 0xe5, 0x66, 0xbf, 0x9d, 0x9d,
	0xf7, 0xde, 0xec, 0xdb, 0x85, 0x5a, 0xa2, 0xa4, 0x91, 0x8f, 0x51, 0x9c, 0x0b, 0x7d, 0x86, 0x78,
	0x86, 0x49, 0xec, 0x5b, 0xa8, 0xbe, 0x9d, 0x5b, 0x99, 0xc2, 0xfc, 0xaf, 0x0b, 0x77, 0xdf, 0x6b,
	0x52, 0x41, 0xb7, 0x2b, 0x87, 0xc2, 0xb0, 0x26, 0xdc, 0x93, 0xdf, 0x05, 0xa9, 0x57, 0xe6, 0x4b,
	0x10, 0x45, 0x8a, 0xb4, 0xae, 0xb9, 0x0d, 0xb7, 0xb9, 0x11, 0x2e, 0xc2, 0xec, 0x10, 0x3c, 0x0b,
	0x9d, 0x0c, 0x50, 0x99, 0x96, 0x14, 0x46, 0x61, 0xf7, 0x03, 0xf6, 0xfb, 0x64, 0xa6, 0x1b, 0x6f,
	0xd9, 0x8d, 0x2b, 0xaa, 0xd8, 0x01, 0x6c, 0x0a, 0x1c, 0x90, 0x6e, 0xa5, 0xfc, 0xaf, 0xe9, 0xb3,
	0xa9, 0x95, 0x1a, 0x6e, 0xb3, 0x1c, 0x2e, 0xa0, 0xec, 0x09, 0x54, 0x65, 0x42, 0x0a, 0x4d, 0x2c,
	0x45, 0xa6, 0xb8, 0x6c, 0x8b, 0x8b, 0x96, 0x78, 0x0f, 0x76, 0x83, 0x68, 0x10, 0x8b, 0xc3, 0xa1,
	0x88, 0x32, 0x1e, 0x43, 0xfa, 0x36, 0x24, 0x7d, 0x13, 0xab, 0x1e, 0xc0, 0x5c, 0x8c, 0xb5, 0x55,
	0x0e, 0x33, 0x08, 0xff, 0x08, 0xfb, 0x4b, 0x88, 0x4e, 0xe2, 0x9e, 0xa0, 0x88, 0xd5, 0xe0, 0x4e,
	0x82, 0xe7, 0x7d, 0x89, 0x91, 0xa5, 0xa9, 0x84, 0xd3, 0x5f, 0xb6, 0x07, 0x1b, 0x3a, 0xee, 0x09,
	0x34, 0x43, 0x45, 0xb6, 0x7b, 0x25, 0x9c, 0x03, 0x5c, 0xc3, 0x83, 0x59, 0xf3, 0x36, 0xea, 0x37,
	0x33, 0xa3, 0x37, 0xf7, 0x91, 0x56, 0xe6, 0xe7, 0x34, 0x31, 0xb3, 0x08, 0xf3, 0x4f, 0xf0, 0x70,
	0x29, 0xe9, 0x9a, 0x9e, 0x02, 0xd8, 0x6e, 0x93, 0x59, 0xe7, 0x4c, 0xf8, 0x11, 0xec, 0xb6, 0xc9,
	0xbc, 0x44, 0x83, 0xc7, 0x38, 0xa0, 0x90, 0x7a, 0xb1, 0x36, 0xa4, 0x42, 0xd2, 0x89, 0x14, 0x9a,
	0x18, 0x83, 0x72, 0x84, 0x06, 0x27, 0xb2, 0xec, 0x77, 0xaa, 0xb6, 0x2b, 0x85, 0xa1, 0x1f, 0x66,
	0xa2, 0x68, 0xfa, 0xcb, 0xbf, 0x42, 0xbd, 0xa5, 0x08, 0x0d, 0xa5, 0x92, 0x66, 0x66, 0xa7, 0xa2,
	0x8a, 0x7a, 0x79, 0x00, 0xda, 0xce, 0x20, 0x55, 0x30, 0x69, 0x97, 0x41, 0xb2, 0x5c, 0xa5, 0x3c,
	0xd7, 0x29, 0x34, 0xae, 0xe6, 0x5a, 0x6f, 0xae, 0x4f, 0x7f, 0x95, 0xe0, 0x7e, 0x90, 0xde, 0xf0,
	0xc9, 0x58, 0x83, 0x8e, 0x4e, 0x2f, 0x5c, 0x4a, 0xc0, 0xde, 0xc2, 0x56, 0x51, 0x48, 0x19, 0xf7,
	0x57, 0x66, 0xb7, 0xce, 0xfc, 0x8c, 0xd0, 0xcb, 0x09, 0x73, 0x87, 0xbd, 0x83, 0x9d, 0xe2, 0x90,
	0xb0, 0x47, 0xfe, 0x35, 0xd2, 0x73, 0x45, 0xd7, 0xe7, 0xb0, 0x99, 0xcf, 0x06, 0xdb, 0xf1, 0x0b,
	0xc3, 0x52, 0xaf, 0xf8, 0x19, 0x90, 0x3b, 0xec, 0x08, 0xaa, 0x05, 0x91, 0x60, 0x5b, 0x7e, 0x3e,
	0x21, 0x97, 0x9b, 0xf7, 0xfc, 0x25, 0xf1, 0xe1, 0x0e, 0x3b, 0x86, 0x6a, 0xc1, 0x31, 0xb1, 0x7d,
	0x7f, 0xd5, 0xe1, 0x15, 0xdb, 0x7a, 0x71, 0xf0, 0x7b, 0xe4, 0xb9, 0x17, 0x23, 0xcf, 0xfd, 0x37,
	0xf2, 0xdc, 0x9f, 0x63, 0xcf, 0xb9, 0x18, 0x7b, 0xce, 0x9f, 0xb1, 0xe7, 0x9c, 0x56, 0x92, 0xce,
	0xfc, 0x59, 0xee, 0xdc, 0xb6, 0xef, 0xf2, 0xb3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x8b,
	0xc7, 0x92, 0xca, 0x05, 0x00, 0x00,
}

func (m *UserAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperationsCountLeft != 0 {
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(m.OperationsCountLeft))
		i--
		dAtA[i] = 0x20
	}
	if m.NamesCountLeft != 0 {
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(m.NamesCountLeft))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OwnerSmartContracWalletAddress) > 0 {
		i -= len(m.OwnerSmartContracWalletAddress)
		copy(dAtA[i:], m.OwnerSmartContracWalletAddress)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.OwnerSmartContracWalletAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerEthAddress) > 0 {
		i -= len(m.OwnerEthAddress)
		copy(dAtA[i:], m.OwnerEthAddress)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.OwnerEthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminFundUserAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminFundUserAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminFundUserAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NamesCount != 0 {
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(m.NamesCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OwnerEthAddress) > 0 {
		i -= len(m.OwnerEthAddress)
		copy(dAtA[i:], m.OwnerEthAddress)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.OwnerEthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminFundUserAccountRequestSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminFundUserAccountRequestSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminFundUserAccountRequestSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminFundGasOperationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminFundGasOperationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminFundGasOperationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperationsCount != 0 {
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(m.OperationsCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OwnerEthAddress) > 0 {
		i -= len(m.OwnerEthAddress)
		copy(dAtA[i:], m.OwnerEthAddress)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.OwnerEthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminFundGasOperationsRequestSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminFundGasOperationsRequestSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminFundGasOperationsRequestSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerEthAddress) > 0 {
		i -= len(m.OwnerEthAddress)
		copy(dAtA[i:], m.OwnerEthAddress)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.OwnerEthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDataNameRegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDataNameRegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDataNameRegisterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUserOperationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserOperationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUserOperationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SignedData) > 0 {
		i -= len(m.SignedData)
		copy(dAtA[i:], m.SignedData)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.SignedData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUserOperationRequestSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserOperationRequestSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUserOperationRequestSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintAnynsAaApi(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAnynsAaApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovAnynsAaApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerEthAddress)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	l = len(m.OwnerSmartContracWalletAddress)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	if m.NamesCountLeft != 0 {
		n += 1 + sovAnynsAaApi(uint64(m.NamesCountLeft))
	}
	if m.OperationsCountLeft != 0 {
		n += 1 + sovAnynsAaApi(uint64(m.OperationsCountLeft))
	}
	return n
}

func (m *AdminFundUserAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerEthAddress)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	if m.NamesCount != 0 {
		n += 1 + sovAnynsAaApi(uint64(m.NamesCount))
	}
	return n
}

func (m *AdminFundUserAccountRequestSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	return n
}

func (m *AdminFundGasOperationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerEthAddress)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	if m.OperationsCount != 0 {
		n += 1 + sovAnynsAaApi(uint64(m.OperationsCount))
	}
	return n
}

func (m *AdminFundGasOperationsRequestSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	return n
}

func (m *GetUserAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerEthAddress)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	return n
}

func (m *GetDataNameRegisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	return n
}

func (m *CreateUserOperationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	l = len(m.SignedData)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	return n
}

func (m *CreateUserOperationRequestSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovAnynsAaApi(uint64(l))
	}
	return n
}

func sovAnynsAaApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAnynsAaApi(x uint64) (n int) {
	return sovAnynsAaApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnynsAaApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerSmartContracWalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerSmartContracWalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamesCountLeft", wireType)
			}
			m.NamesCountLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamesCountLeft |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationsCountLeft", wireType)
			}
			m.OperationsCountLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationsCountLeft |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnynsAaApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminFundUserAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnynsAaApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminFundUserAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminFundUserAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamesCount", wireType)
			}
			m.NamesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnynsAaApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminFundUserAccountRequestSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnynsAaApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminFundUserAccountRequestSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminFundUserAccountRequestSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnynsAaApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminFundGasOperationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnynsAaApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminFundGasOperationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminFundGasOperationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationsCount", wireType)
			}
			m.OperationsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnynsAaApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminFundGasOperationsRequestSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnynsAaApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminFundGasOperationsRequestSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminFundGasOperationsRequestSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnynsAaApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnynsAaApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnynsAaApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDataNameRegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnynsAaApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDataNameRegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDataNameRegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context[:0], dAtA[iNdEx:postIndex]...)
			if m.Context == nil {
				m.Context = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnynsAaApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserOperationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnynsAaApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserOperationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserOperationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedData = append(m.SignedData[:0], dAtA[iNdEx:postIndex]...)
			if m.SignedData == nil {
				m.SignedData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context[:0], dAtA[iNdEx:postIndex]...)
			if m.Context == nil {
				m.Context = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnynsAaApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserOperationRequestSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnynsAaApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserOperationRequestSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserOperationRequestSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnynsAaApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnynsAaApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnynsAaApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnynsAaApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnynsAaApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAnynsAaApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAnynsAaApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAnynsAaApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAnynsAaApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnynsAaApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAnynsAaApi = fmt.Errorf("proto: unexpected end of group")
)
